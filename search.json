[{"title":"2013-2014-Brazil-Subregional-Programming-Contest","date":"2021-03-31T08:22:19.000Z","url":"/2021/03/31/2013-2014-Brazil-Subregional-Programming-Contest/","tags":[["题解","/tags/%E9%A2%98%E8%A7%A3/"]],"categories":[["ACM","/categories/ACM/"]],"content":"C - Boss题意：给出一个有向无环图，每条边x-&gt;y表示x是y的直属上司。两种操作，一种T x y表示将x和y的岗位互换，一种P x表示查询x的所有上司（直接或非直接领导）中的最小年龄 题解：用两个数组id1 id2。id1[i]表示在原关系图中i位置上的人现在的编号，id2[i]表示编号为i的人现在的位置。通过这两个数组可以在交换位置的时候O(1)更换位置并更新数组，具体细节看代码吧。 H - Buses题意：小巴长5米，大巴长10米，给定一个长度，和每种巴士的不同颜色数，求所有不同排列情况的数量的后六位 题解：递推部分比较简单，$dp_i$表示长度为$i*5$时共有多少种不同的放置情况，则可以分最后放置的是大巴还是小巴，并进行转移。 转移式是这样的$dp_i = dp_{i-1}k+dp_{i-2}l$其中k是小巴的颜色数量，l是大巴的颜色数量 但这道题数据范围是1e15，递推也做不了，故需要使用矩阵快速幂来快速求解。可以推出$[f_{i-2},f_{i-1}] \\left[ \\begin{matrix} 0 &amp; l \\\\ 1 &amp; k \\end{matrix} \\right] =[f_{i-1},f_i]$则$[f_{n-1},f_{n}] = [f_{i-2},f_{i-1}]\\left[ \\begin{matrix} 0 &amp; l \\\\ 1 &amp; k \\end{matrix} \\right]^{n-1}$后半部分可以使用矩阵快速幂求并取模，则可以求出最终答案 "},{"title":"ECPC-2015部分题解","date":"2021-03-17T09:00:59.000Z","url":"/2021/03/17/ECPC-2015%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/","tags":[["题解","/tags/%E9%A2%98%E8%A7%A3/"]],"categories":[["ACM","/categories/ACM/"]],"content":"A - Arcade Game题意：给一个小于9位且每一位各不相同的数字，一次可以让这个数字的所有位重新排列，如果获得的排列是所有排列的最大情况则获胜，否则如果大于当前数字则可继续游戏，直到获胜或失败。 题解：直接用组合数做肯定会超时，可以通过推式子的方式推出所有情况 首先求出当前位数一共有多少种排列情况n，并求出在所有排列情况中大于给出数字的数量sum。则一次到达最大值的概率为$\\frac{n!}{(n-0)!0!}\\frac{1}{n}$，第二次到达最大值的概率为$\\frac{n!}{(n-1)!1!}\\frac{1}{nn}$可以看到两项之间仅差$\\frac{n-1}{1n}$，故可以通过递推式找到每一种情况，相加求和即为索求答案 代码： C - Connecting Graph题意：有两个操作，第一个操作在第i秒时连接u和v，第二个操作询问u和v最早的联通时间，如果未联通则输出-1 题解：连边操作可以考虑使用并查集进行查询，如果两点未联通即两点不在同一并查集中则令两点所在并查集连接到一起，并令边权为当前时间。同时查询操作可以存储下来查询的时间和两点，最后当图建完后对每一次询问使用倍增LCA快速查找uv之间路径上的时间最大值，并判断输出答案。 L - Candy Jars题意：给出n个罐子，每个罐子里装有一定数量的糖，每次选择一个罐子，扔掉其余所有糖，并将选择罐子里的糖分到所有罐子里使得所有罐子里都不为空。不能分配糖的人输。 题解：第一种情况当所有罐子里的糖都不够n个罐子分也就是小于n的时候，先手必输。当存在糖数可以使得分完后任意罐子都小于n则先手必赢。即存在$a_i&lt;=n(n-1)$。当$a_i&gt;n(n-1)$时由于此时先手无论怎么分，都必然存在分完后的$a_i&lt;=n(n-1)且a_i&gt;=n$即分完后先手必赢，即该游戏先手必输。归纳可得如果存在$n&lt;=a_i$%$n(n-1)&lt;n*(n-1)$则先手赢，否则后手赢。 "},{"title":"A-Radio-Prize","date":"2021-01-24T14:35:56.000Z","url":"/2021/01/24/A-Radio-Prize/","tags":[["思维","/tags/%E6%80%9D%E7%BB%B4/"]],"categories":[["ACM","/categories/ACM/"]],"content":"题意给定一棵树，树上每条边及每个点都有权值。定义$P_u=\\sum_{v}d(u,v)(t_u+t_v)$其中$d(u,v)$为树上u到v的距离，$t_u$和$t_v$分别是两点权值，求每个点的P值。 分析首先我们可以看到$P_u$可以分成 $t_u\\sum_{v}d(u,v)+\\sum_vt_vd(u,v)$ ，则我们只需要知道对于每一个节点$\\sum_{v}d(u,v)$和$\\sum_vt_vd(u,v)$的值即可。直接计算复杂度太高，我们可以考虑通过一个已经计算出值的节点计算当前节点值。 当我们已经计算得到$u$的值，并想要得到与$u$相邻$u’$的值时，可以将除了$u’$的其他节点分为两部分，一部分不经过$u$，另一部分经过$u$。 计算$\\sum_{v}d(u,v)$时，对于这两部分节点来说，不经过$u$的节点的$d(u’,v)$相比$d(u,v)$减少了$w_i$，经过$u$的节点的$d(u’,v)$相比$d(u,v)$增加了$w_i$，故只需知道两部分节点的分别数量即可得到$\\sum_{v}d(u,v)$。 计算$\\sum_vt_vd(u,v)$时，对于这两部分节点来说，不经过$u$的节点的$t_vd(u’,v)$相比$t_vd(u,v)$减少了$w_i\\sum_vtv$，经过$u$的节点的$t_vd(u’,v)$相比$t_vd(u,v)$增加了了$w_i\\sum_vtv$，所以这部分只需知道两部分节点的点值和即可得到$\\sum_vt_vd(u,v)$ 有了转移方法后，我们需要获得对于每一个节点两部分分别的值，故可以指定任意节点为根节点，通过一次dfs，得到子节点数量和及子节点点值和后，通过所有节点数量和所有节点点值和得到另一部分节点的对应值，即可进行转移。 代码"},{"title":"链式结构入门","date":"2021-01-22T07:38:16.000Z","url":"/2021/01/22/%E9%93%BE%E5%BC%8F%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8/","tags":[["链表","/tags/%E9%93%BE%E8%A1%A8/"]],"categories":[["ACM","/categories/ACM/"]],"content":"链式结构"},{"title":"NorthAmericanSoutheastRegional2019部分题解","date":"2021-01-22T01:57:00.000Z","url":"/2021/01/22/NorthAmericanSoutheastRegional2019%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/","tags":[["题解","/tags/%E9%A2%98%E8%A7%A3/"]],"categories":[["ACM","/categories/ACM/"]],"content":"A - Carryless Square Root题目大意给定一个数n，让你找出最小的a使得 a*a 在无进位乘法下等于n 代码 D - Swap Free题目大意给定一个字符串集合，集合内单词都互为排列，即单词无重复、使用字母完全相同。问找出一个最大子集，使得该集合内单词互相之间无法通过交换一对字母得到。 代码 H - Levenshtein Distance题目大意给定使用字母和一个单词，让你找出所有使用该字母表并且仅对该单词操作一次的字符串，操作可以是添加、删除或替换一个字母。 代码 "},{"title":"Gym-102465-部分题解","date":"2021-01-18T09:04:20.000Z","url":"/2021/01/18/Gym-102465K-Dishonest-Driver%E9%A2%98%E8%A7%A3/","tags":[["题解","/tags/%E9%A2%98%E8%A7%A3/"]],"categories":[["ACM","/categories/ACM/"]],"content":"I - Mason’s Mark 题目大意给出一张仅有黑白两种颜色的照片，让你分析照片中有几个ABC 解析题目很长…要求很多…但是读明白题后没有一点思路的难度。其他要求不再赘述，这里只说最关键的一点，就是黑色像素仅有三种可能，即噪点，相框，和标记。也就是说，只要排除了相框和标记的黑色像素，剩余的黑色像素一定是一个字母上的。剩下的工作就仅剩下判断这个黑色像素所属字母是什么字母了。我用了一种非常简单粗暴的方法…具体看代码吧 代码 K-Dishonest Driver 题目大意给出一个字符串，两个相邻且相同子串可以进行压缩，问压缩后字符串中有多少元素。 解析一个区间的左半部分和右半部分可以进行合并，很自然的想到区间dp。状态为$dp[i][j]$ ，为字符串下标i到下标j间的最小压缩。 区间的合并有两种方式，一种是直接合并，最小压缩值为两段区间之和；另一种为压缩合并，最小压缩值为压缩区间的最小压缩值。 故转移可以写成: $dp[i][j] = min(dp[i][j],dp[i][k]+dp[k+1][j])$ $dp[i][j] = dp[i][k]$ 当且仅当i到k为循环字符串，且k+1到j为i到k的循环节 第一种可以对每一个区间都进行判断，因为没有特殊要求。 第二种情况需要用到两个辅助数组，一个用于$O(1)$判断两段相邻同长度子串是否相等，另一个用于记录一段子串是否为循环字符串，并记录循环字符串最后一个循环节的初始下标。第一个辅助数组可以进行预处理，第二个可以在区间dp的时候进行同步更新。 代码"},{"title":"manacher介绍及图文讲解（用于求解最长回文子串）","date":"2021-01-18T06:49:12.000Z","url":"/2021/01/18/manacher%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%9B%BE%E6%96%87%E8%AE%B2%E8%A7%A3%EF%BC%88%E7%94%A8%E4%BA%8E%E6%B1%82%E8%A7%A3%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%EF%BC%89/","tags":[["字符串","/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"]],"categories":[["ACM","/categories/ACM/"]],"content":"manacher算法是一种可以在O(N)时间复杂度下求字符串所有回文子串的算法，也是求最大回文子串最高效的算法。这种算法在进行遍历的时候，充分利用了回文串的特性，减少了许多不必要的计算，使得时间复杂度降低到了线性水平。该算法的难度在于理解，一旦理解后，代码是非常简单的。 manacher算法有如下几个要点： 如何计算回文串长度（O($N^2$)算法） 如何将奇回文串与偶回文串统一判断 如何优化O($N^2$)时间复杂度的中心拓展算法下面我们来一一讲解 一、如何计算回文串长度如果没有时间上的限制，我们可以使用暴力的做法：中心拓展法 我们知道，如果一个字符串是回文串，那么该字符串必是中心对称的。故我们可以选择一个中心，从它开始，向两边逐一判断字符是否相同，拓展回文串长度。由于回文串可以是奇回文串也可以是偶回文串，我们需要选择一个字符或者选择两个字符中间作为中心进行逐一判断，故一共有 N + N - 1个中心。 二、奇回文串与偶回文串的统一判断回文串既可以有aba的形式，也可以有abba的形式，在实际写代码的时候如果不进行处理，会使得代码变得比较复杂。因此我们可以在每两个字符间及字符串头、尾加上一个不曾在字符串中出现过的字符，如#、$等字符，使得在进行遍历的时候可以不用分情况讨论 例如： 则我们可以对所有字符做中心拓展，得回文半径Pi，则原字符串的子回文串长度为Pi - 1代码如下: 三、中心拓展算法的优化：manacher算法目前我们已经有了时间复杂度为O($N^2$)的算法，如何优化呢。 不难发现，回文串的特点为中心对称，也就是说在回文串当中，围绕对称中心，左半边与右半边是完全相同的。故一个在左半边回文串内的子回文串，也必定存在于右半边，如该字符串以b为对称中心，左边aba的子回文串在右边也出现了，那么我们可以思考一下，如果以从左到右的顺序进行中心拓展遍历，是不是可以通过已经计算过的回文半径来给当前还未计算的回文半径进行赋值？答案是显然的，但我们还需要考虑几种不同的情况。 我们知道上述理论成立的基础，是建立在回文串左右对称的前提下的，也就是说，我们如果想把过去计算过的回文半径拿来用，必然需要判断一下子回文串是否包含在大回文串之内，也就是如下三种情况： 当前中心在回文串的对称位置下的子回文串在回文串内这是最简单的情况也是我们最希望看到的情况，因为我们可以直接使用已经计算过的回文半径来进行赋值如我们遍历到当前位置时（绿色箭头），可以通过已经计算过的对称位置子回文串对称中心（橙色箭头）得到当前回文半径，也就是1。 当前中心在回文串的对称位置下的子回文串超出了回文串的范围如果对称位置下的子回文串并不完全被包含在回文串内，这种情况下不能直接将对称位置的回文半径赋值。但由于回文串的性质，我们可以保证包含在回文串内部的子串一定是回文串，则该种情况下当前位置的回文半径就是当前位置到回文串边缘的距离。当前我们计算到绿色箭头时，对称位置的Pi = 2，但当前位置距离最大回文串的边界只有1，则只能将其赋值为1。 当前中心已经不在回文串范围之内了这种情况下，一切都是未知的，只能用中心拓展算法来进行计算，也就是将该中心初始化为1，并进行中心拓展算法。 四、代码实现虽然上面啰里啰嗦讲了一大堆，但实际代码非常简单，可以说理解了之后不用记模板随便敲的那种。 最后放一道模板题最长回文 "},{"title":"可持久化数据结构之静态主席树","date":"2021-01-18T06:44:58.000Z","url":"/2021/01/18/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%9D%99%E6%80%81%E4%B8%BB%E5%B8%AD%E6%A0%91/","tags":[["可持久化数据结构","/tags/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"]],"categories":[["ACM","/categories/ACM/"]],"content":"参考博客 前言如果完全掌握了主席树的前置知识，主席树其实也是一种并不算很难的数据结构（虽然蒟蒻还是花了好久）。主席树主要的前置知识就是权值线段树，一旦理解了权值线段树的相关知识，那么主席树的学习应该也会变得较为简单。 权值线段树权值线段树是线段树的一种，但是它与普通线段树不同的地方在于，普通线段树节点的区间代表的是序列中的区间，而权值线段树节点的区间则代表了序列中值的区间。如这样一个序列：1 4 2 3 3普通线段树中我们通常以序列下标为范围来进行线段树的区间划分，而在权值线段树中这个数组是这样保存的：其中每个节点的值是这个序列在这个值域范围内一共有多少个数。 权值线段树的可加减性让我们想象这样两颗权值线段树：一颗以序列[1,x]为序列建树，另一颗以[1,n]为基础序列建树，同时都用相同的范围建树，这样的两棵树每个节点所代表的值域是完全相同的。这也就是说，如果我们用第二棵树的某个节点的权值去减去第一棵树对应节点的权值，所得到的值便应该是[x+1,n]序列中该节点值域范围内数的数量，这也就是权值线段树的可加减性。 静态主席树通过权值线段树及其性质，我们不难想到如何查找区间[l,r]范围的第k大数：只需要针对序列a的每一个前缀都建立一颗权值线段树即可。然而这样所需要的空间又过于庞大了，需要一定的优化。通过观察两棵相邻权值线段树的结构，可以发现以下规律：那么我们就可以让没有变化的节点指向到之前建好的树上，并且新建与前一棵树上不同路径上的节点即可。那么这样我们就得到了建立静态主席树的方法，下面是静态主席树模板题及代码HDU 2665 "},{"title":"dijkstra最短路及优化","date":"2021-01-18T06:35:00.000Z","url":"/2021/01/18/dijkstra%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%8F%8A%E4%BC%98%E5%8C%96/","tags":[["图论","/tags/%E5%9B%BE%E8%AE%BA/"],["数据结构","/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"]],"categories":[["ACM","/categories/ACM/"]],"content":"算法描述该算法维护了两个点集，S和V。其中S集合为已经确定到源点最短路径的点集，V集合为未确定到源点最短路径的点集。 循环进行以下操作直到所有点都确定了与源点的最短路径：从V集合中取出一点，使得该点到源点距离为V集合中最短。然后通过该点，更新与该点相连的点距离源点的距离。最后，将该点放入S集合中。 算法正确性该算法最关键的步骤就是从V集合中取点的操作。设i为V集合中一点，j为V集合中任意其他一点，dis[i]&lt;dis[j]，则dis[i]&lt;dis[j]+a[j][i]，故点i距离源点距离为确定值。其中dis[i]为源点到点i的最短路径，a[j][i]为点j到点i的距离。由于我们需要取一个已经确定了与源点最短路径的点，如果取出的点的dis[i]并不是最小的，那么其他点是可以更新该点的，也就是说该点距离源点的最短路径并不是确定的。相反，如果dis[i]小于集合V中的任何其他点到源点的距离，那么集合V中的其他点一定不能更新dis[i]使dis[i]更小，则点v距离源点的距离dis[i]一定是确定的。 一些不足首先，dijkstra算法得以成立的前提是从V集合中取出的点距离源点的最短路是确定的，不会因为后续的更新而变化的，但是如果图存在负权，则dis[i]&lt;dis[j],但dis[i]不一定小于dis[j]+a[j][i]，这时选择的i点距离源点的最短路就不是确定的了。 代码 优先队列（二叉堆）优化朴素算法中如果想从集合V中选点需要$O(n)$的时间复杂度，但是如果使用优先队列可以将这一步骤优化到$O(logn)$。直接上代码。 参考：【原创】算法系列——四种最短路算法：Floyd，Dijkstra，Bellman-Ford，SPFA"}]