[{"title":"manacher介绍及图文讲解（用于求解最长回文子串）","date":"2021-01-18T06:49:12.000Z","url":"/2021/01/18/manacher%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%9B%BE%E6%96%87%E8%AE%B2%E8%A7%A3%EF%BC%88%E7%94%A8%E4%BA%8E%E6%B1%82%E8%A7%A3%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%EF%BC%89/","tags":[["字符串","/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"]],"categories":[["ACM","/categories/ACM/"]],"content":"manacher算法是一种可以在O(N)时间复杂度下求字符串所有回文子串的算法，也是求最大回文子串最高效的算法。这种算法在进行遍历的时候，充分利用了回文串的特性，减少了许多不必要的计算，使得时间复杂度降低到了线性水平。该算法的难度在于理解，一旦理解后，代码是非常简单的。 manacher算法有如下几个要点： 如何计算回文串长度（O($N^2$)算法） 如何将奇回文串与偶回文串统一判断 如何优化O($N^2$)时间复杂度的中心拓展算法下面我们来一一讲解 一、如何计算回文串长度如果没有时间上的限制，我们可以使用暴力的做法：中心拓展法 我们知道，如果一个字符串是回文串，那么该字符串必是中心对称的。故我们可以选择一个中心，从它开始，向两边逐一判断字符是否相同，拓展回文串长度。由于回文串可以是奇回文串也可以是偶回文串，我们需要选择一个字符或者选择两个字符中间作为中心进行逐一判断，故一共有 N + N - 1个中心。 二、奇回文串与偶回文串的统一判断回文串既可以有aba的形式，也可以有abba的形式，在实际写代码的时候如果不进行处理，会使得代码变得比较复杂。因此我们可以在每两个字符间及字符串头、尾加上一个不曾在字符串中出现过的字符，如#、$等字符，使得在进行遍历的时候可以不用分情况讨论 例如： 则我们可以对所有字符做中心拓展，得回文半径Pi，则原字符串的子回文串长度为Pi - 1代码如下: 三、中心拓展算法的优化：manacher算法目前我们已经有了时间复杂度为O($N^2$)的算法，如何优化呢。 不难发现，回文串的特点为中心对称，也就是说在回文串当中，围绕对称中心，左半边与右半边是完全相同的。故一个在左半边回文串内的子回文串，也必定存在于右半边，如该字符串以b为对称中心，左边aba的子回文串在右边也出现了，那么我们可以思考一下，如果以从左到右的顺序进行中心拓展遍历，是不是可以通过已经计算过的回文半径来给当前还未计算的回文半径进行赋值？答案是显然的，但我们还需要考虑几种不同的情况。 我们知道上述理论成立的基础，是建立在回文串左右对称的前提下的，也就是说，我们如果想把过去计算过的回文半径拿来用，必然需要判断一下子回文串是否包含在大回文串之内，也就是如下三种情况： 当前中心在回文串的对称位置下的子回文串在回文串内这是最简单的情况也是我们最希望看到的情况，因为我们可以直接使用已经计算过的回文半径来进行赋值如我们遍历到当前位置时（绿色箭头），可以通过已经计算过的对称位置子回文串对称中心（橙色箭头）得到当前回文半径，也就是1。 当前中心在回文串的对称位置下的子回文串超出了回文串的范围如果对称位置下的子回文串并不完全被包含在回文串内，这种情况下不能直接将对称位置的回文半径赋值。但由于回文串的性质，我们可以保证包含在回文串内部的子串一定是回文串，则该种情况下当前位置的回文半径就是当前位置到回文串边缘的距离。当前我们计算到绿色箭头时，对称位置的Pi = 2，但当前位置距离最大回文串的边界只有1，则只能将其赋值为1。 当前中心已经不在回文串范围之内了这种情况下，一切都是未知的，只能用中心拓展算法来进行计算，也就是将该中心初始化为1，并进行中心拓展算法。 四、代码实现虽然上面啰里啰嗦讲了一大堆，但实际代码非常简单，可以说理解了之后不用记模板随便敲的那种。 最后放一道模板题最长回文 "},{"title":"可持久化数据结构之静态主席树","date":"2021-01-18T06:44:58.000Z","url":"/2021/01/18/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%9D%99%E6%80%81%E4%B8%BB%E5%B8%AD%E6%A0%91/","tags":[["可持久化数据结构","/tags/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"]],"categories":[["ACM","/categories/ACM/"]],"content":"参考博客 前言如果完全掌握了主席树的前置知识，主席树其实也是一种并不算很难的数据结构（虽然蒟蒻还是花了好久）。主席树主要的前置知识就是权值线段树，一旦理解了权值线段树的相关知识，那么主席树的学习应该也会变得较为简单。 权值线段树权值线段树是线段树的一种，但是它与普通线段树不同的地方在于，普通线段树节点的区间代表的是序列中的区间，而权值线段树节点的区间则代表了序列中值的区间。如这样一个序列：1 4 2 3 3普通线段树中我们通常以序列下标为范围来进行线段树的区间划分，而在权值线段树中这个数组是这样保存的：其中每个节点的值是这个序列在这个值域范围内一共有多少个数。 权值线段树的可加减性让我们想象这样两颗权值线段树：一颗以序列[1,x]为序列建树，另一颗以[1,n]为基础序列建树，同时都用相同的范围建树，这样的两棵树每个节点所代表的值域是完全相同的。这也就是说，如果我们用第二棵树的某个节点的权值去减去第一棵树对应节点的权值，所得到的值便应该是[x+1,n]序列中该节点值域范围内数的数量，这也就是权值线段树的可加减性。 静态主席树通过权值线段树及其性质，我们不难想到如何查找区间[l,r]范围的第k大数：只需要针对序列a的每一个前缀都建立一颗权值线段树即可。然而这样所需要的空间又过于庞大了，需要一定的优化。通过观察两棵相邻权值线段树的结构，可以发现以下规律：那么我们就可以让没有变化的节点指向到之前建好的树上，并且新建与前一棵树上不同路径上的节点即可。那么这样我们就得到了建立静态主席树的方法，下面是静态主席树模板题及代码HDU 2665 "},{"title":"dijkstra最短路及优化","date":"2021-01-18T06:35:00.000Z","url":"/2021/01/18/dijkstra%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%8F%8A%E4%BC%98%E5%8C%96/","tags":[["图论","/tags/%E5%9B%BE%E8%AE%BA/"],["数据结构","/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"]],"categories":[["ACM","/categories/ACM/"]],"content":"算法描述该算法维护了两个点集，S和V。其中S集合为已经确定到源点最短路径的点集，V集合为未确定到源点最短路径的点集。 循环进行以下操作直到所有点都确定了与源点的最短路径：从V集合中取出一点，使得该点到源点距离为V集合中最短。然后通过该点，更新与该点相连的点距离源点的距离。最后，将该点放入S集合中。 算法正确性该算法最关键的步骤就是从V集合中取点的操作。设i为V集合中一点，j为V集合中任意其他一点，dis[i]&lt;dis[j]，则dis[i]&lt;dis[j]+a[j][i]，故点i距离源点距离为确定值。其中dis[i]为源点到点i的最短路径，a[j][i]为点j到点i的距离。由于我们需要取一个已经确定了与源点最短路径的点，如果取出的点的dis[i]并不是最小的，那么其他点是可以更新该点的，也就是说该点距离源点的最短路径并不是确定的。相反，如果dis[i]小于集合V中的任何其他点到源点的距离，那么集合V中的其他点一定不能更新dis[i]使dis[i]更小，则点v距离源点的距离dis[i]一定是确定的。 一些不足首先，dijkstra算法得以成立的前提是从V集合中取出的点距离源点的最短路是确定的，不会因为后续的更新而变化的，但是如果图存在负权，则dis[i]&lt;dis[j],但dis[i]不一定小于dis[j]+a[j][i]，这时选择的i点距离源点的最短路就不是确定的了。 代码 优先队列（二叉堆）优化朴素算法中如果想从集合V中选点需要$O(n)$的时间复杂度，但是如果使用优先队列可以将这一步骤优化到$O(logn)$。直接上代码。 参考：【原创】算法系列——四种最短路算法：Floyd，Dijkstra，Bellman-Ford，SPFA"}]