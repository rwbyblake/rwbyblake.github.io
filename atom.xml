<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rwbyblake的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-31T09:05:41.625Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>rwbyblake</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2013-2014-Brazil-Subregional-Programming-Contest</title>
    <link href="http://example.com/2021/03/31/2013-2014-Brazil-Subregional-Programming-Contest/"/>
    <id>http://example.com/2021/03/31/2013-2014-Brazil-Subregional-Programming-Contest/</id>
    <published>2021-03-31T08:22:19.000Z</published>
    <updated>2021-03-31T09:05:41.625Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-Boss"><a href="#C-Boss" class="headerlink" title="C - Boss"></a><a href="https://vjudge.net/problem/Gym-101473C">C - Boss</a></h3><p>题意：给出一个有向无环图，每条边x-&gt;y表示x是y的直属上司。两种操作，一种T x y表示将x和y的岗位互换，一种P x表示查询x的所有上司（直接或非直接领导）中的最小年龄</p><p>题解：用两个数组id1 id2。id1[i]表示在原关系图中i位置上的人现在的编号，id2[i]表示编号为i的人现在的位置。通过这两个数组可以在交换位置的时候O(1)更换位置并更新数组，具体细节看代码吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fast                          \</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>); \</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> LINF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-3</span>;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; up[N];</span><br><span class="line"><span class="keyword">int</span> age[N];</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> id1[N], id2[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(x);</span><br><span class="line">    <span class="keyword">int</span> res = INF;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : up[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[it]) <span class="keyword">continue</span>;</span><br><span class="line">            q.push(it);</span><br><span class="line">            vis[it] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//通过位置找到现在在这个位置上的编号，并更新最小年龄</span></span><br><span class="line">            res = min(res, age[id1[it]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, I;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; I;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        id1[i] = i;</span><br><span class="line">        id2[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;age[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        up[y].insert(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= I; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> o[<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, o);</span><br><span class="line">        <span class="keyword">if</span> (o[<span class="number">0</span>] == <span class="string">&#x27;T&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x, y;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">            <span class="comment">// 交换编号x和y所在位置的编号，并交换编号x和y的所在位置</span></span><br><span class="line">            swap(id1[id2[x]], id1[id2[y]]);</span><br><span class="line">            swap(id2[x], id2[y]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            <span class="comment">// 找到编号x的现在位置</span></span><br><span class="line">            x = id2[x];</span><br><span class="line">            <span class="keyword">int</span> w = bfs(x);</span><br><span class="line">            <span class="keyword">if</span> (w == INF)</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="H-Buses"><a href="#H-Buses" class="headerlink" title="H - Buses"></a><a href="https://vjudge.net/problem/Gym-101473H">H - Buses</a></h3><p>题意：小巴长5米，大巴长10米，给定一个长度，和每种巴士的不同颜色数，求所有不同排列情况的数量的后六位</p><p>题解：递推部分比较简单，$dp_i$表示长度为$i*5$时共有多少种不同的放置情况，则可以分最后放置的是大巴还是小巴，并进行转移。</p><p>转移式是这样的$dp_i = dp_{i-1}<em>k+dp_{i-2}</em>l$其中k是小巴的颜色数量，l是大巴的颜色数量</p><p>但这道题数据范围是1e15，递推也做不了，故需要使用矩阵快速幂来快速求解。可以推出$[f_{i-2},f_{i-1}]<em><br> \left[<br> \begin{matrix}<br>   0 &amp; l \\<br>   1 &amp; k<br>  \end{matrix}<br>  \right] =[f_{i-1},f_i]$则$[f_{n-1},f_{n}] = [f_{i-2},f_{i-1}]</em>\left[<br> \begin{matrix}<br>   0 &amp; l \\<br>   1 &amp; k<br>  \end{matrix}<br>  \right]^{n-1}$后半部分可以使用矩阵快速幂求并取模，则可以求出最终答案</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fast                          \</span></span><br><span class="line">       ios_base::sync_with_stdio(<span class="literal">false</span>); \</span><br><span class="line">       <span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e2</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> LINF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-3</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">2</span>][<span class="number">2</span>], res[<span class="number">2</span>][<span class="number">2</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cheng</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a[][<span class="number">2</span>], <span class="keyword">long</span> <span class="keyword">long</span> b[][<span class="number">2</span>], <span class="keyword">long</span> <span class="keyword">long</span> c[][<span class="number">2</span>])</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> d[<span class="number">2</span>][<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt;<span class="number">2</span>;k++)&#123;</span><br><span class="line">                d[i][j] += (a[i][k] * b[k][j])%mod;</span><br><span class="line">                d[i][j] %= mod; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(c,d,<span class="keyword">sizeof</span> d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fastpow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) cheng(res,a,res);</span><br><span class="line">        cheng(a,a,a);</span><br><span class="line">        k = k&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n,k,l;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;l;</span><br><span class="line">    k %= mod;</span><br><span class="line">    l %= mod;</span><br><span class="line">    n /= <span class="number">5</span>;</span><br><span class="line">    a[<span class="number">0</span>][<span class="number">1</span>] = l,a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>, a[<span class="number">1</span>][<span class="number">1</span>] = k;</span><br><span class="line">    fastpow(n - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%06d\n&quot;</span>, (res[<span class="number">0</span>][<span class="number">1</span>] % mod + k * res[<span class="number">1</span>][<span class="number">1</span>] % mod) % mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;C-Boss&quot;&gt;&lt;a href=&quot;#C-Boss&quot; class=&quot;headerlink&quot; title=&quot;C - Boss&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://vjudge.net/problem/Gym-101473C&quot;&gt;C - Boss&lt;/a&gt;&lt;/h3&gt;</summary>
      
    
    
    
    <category term="ACM" scheme="http://example.com/categories/ACM/"/>
    
    
    <category term="题解" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>ECPC-2015部分题解</title>
    <link href="http://example.com/2021/03/17/ECPC-2015%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2021/03/17/ECPC-2015%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</id>
    <published>2021-03-17T09:00:59.000Z</published>
    <updated>2021-03-17T11:17:59.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="A-Arcade-Game"><a href="#A-Arcade-Game" class="headerlink" title="A - Arcade Game"></a><a href="https://vjudge.net/problem/Gym-100814A">A - Arcade Game</a></h3><p>题意：给一个小于9位且每一位各不相同的数字，一次可以让这个数字的所有位重新排列，如果获得的排列是所有排列的最大情况则获胜，否则如果大于当前数字则可继续游戏，直到获胜或失败。</p><p>题解：直接用组合数做肯定会超时，可以通过推式子的方式推出所有情况</p><p>首先求出当前位数一共有多少种排列情况n，并求出在所有排列情况中大于给出数字的数量sum。则一次到达最大值的概率为$\frac{n!}{(n-0)!<em>0!}</em>\frac{1}{n}$，第二次到达最大值的概率为$\frac{n!}{(n-1)!<em>1!}</em>\frac{1}{n<em>n}$可以看到两项之间仅差$\frac{n-1}{1</em>n}$，故可以通过递推式找到每一种情况，相加求和即为索求答案</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> LINF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-3</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>], b[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len;i++)    <span class="keyword">if</span>(a[i]!=b[i])  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        a[len++] = n%<span class="number">10</span>;</span><br><span class="line">        n/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        b[len-i<span class="number">-1</span>] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len;i++)    a[i] = b[i];</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    n = <span class="number">0</span>;</span><br><span class="line">    sort(a, a + len);</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        <span class="keyword">if</span> (check()) &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(next_permutation(a,a+len))&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)    sum++;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check()) flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> ans;</span><br><span class="line">    n++;</span><br><span class="line">    <span class="keyword">if</span>(sum==<span class="number">0</span>)  ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>    ans = <span class="number">1.0</span>/n;</span><br><span class="line">    <span class="keyword">double</span> now = ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;sum;i++)&#123;</span><br><span class="line">        now = now*(sum-i)*<span class="number">1.0</span>/i*<span class="number">1.0</span>/n;</span><br><span class="line">        ans += now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.9f\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-Connecting-Graph"><a href="#C-Connecting-Graph" class="headerlink" title="C - Connecting Graph"></a><a href="https://vjudge.net/problem/Gym-100814C">C - Connecting Graph</a></h3><p>题意：有两个操作，第一个操作在第i秒时连接u和v，第二个操作询问u和v最早的联通时间，如果未联通则输出-1</p><p>题解：连边操作可以考虑使用并查集进行查询，如果两点未联通即两点不在同一并查集中则令两点所在并查集连接到一起，并令边权为当前时间。同时查询操作可以存储下来查询的时间和两点，最后当图建完后对每一次询问使用倍增LCA快速查找uv之间路径上的时间最大值，并判断输出答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> LINF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-3</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w,next;</span><br><span class="line">&#125;a[M];</span><br><span class="line"><span class="keyword">int</span> f[N],cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    a[++cnt].v = v;</span><br><span class="line">    a[cnt].w = w;</span><br><span class="line">    a[cnt].next = f[u];</span><br><span class="line">    f[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> lg;</span><br><span class="line"><span class="keyword">int</span> father[N][<span class="number">30</span>],root[N],Time[N][<span class="number">30</span>],dep[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = u,y = v;</span><br><span class="line">    <span class="keyword">if</span>(dep[u] &lt; dep[v]) swap(u,v);</span><br><span class="line">    <span class="keyword">int</span> Max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = lg;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[father[u][i]] &gt;= dep[v]) &#123;</span><br><span class="line">            Max = max(Max,Time[u][i]);</span><br><span class="line">            u = father[u][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(u==v)    <span class="keyword">return</span> Max;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = lg;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(father[u][i]!=father[v][i])&#123;</span><br><span class="line">            Max = max(Max,max(Time[u][i],Time[v][i]));</span><br><span class="line">            u = father[u][i],v = father[v][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max(Max,max(Time[u][<span class="number">0</span>],Time[v][<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lg; j++) &#123;</span><br><span class="line">        father[u][j] = father[father[u][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">        Time[u][j] = max(Time[u][j - <span class="number">1</span>], Time[father[u][j - <span class="number">1</span>]][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = f[u];i;i = a[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = a[i].v,w = a[i].w;</span><br><span class="line">        <span class="keyword">if</span>(v==fa)   <span class="keyword">continue</span>;</span><br><span class="line">        dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">        father[v][<span class="number">0</span>] = u;</span><br><span class="line">        Time[v][<span class="number">0</span>] = w;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> c[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c[v]==v) <span class="keyword">return</span> v;</span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">return</span> c[v] = getf(c[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++) c[i] = i;</span><br><span class="line">    lg = (<span class="keyword">int</span>)(<span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">2</span>))+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> type,u,v;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;&gt; query;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;type,&amp;u,&amp;v);</span><br><span class="line">        <span class="keyword">if</span>(type==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> id1 = getf(u),id2 = getf(v);</span><br><span class="line">            <span class="keyword">if</span>(id1==id2)    <span class="keyword">continue</span>;</span><br><span class="line">            c[id1] = id2;</span><br><span class="line">            add(id1, id2, i);</span><br><span class="line">            add(id2,id1,i);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            query.push_back(&#123;i,&#123;u,v&#125;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;=n;i++)  <span class="keyword">if</span>(c[i]==i)&#123;</span><br><span class="line">        father[i][<span class="number">0</span>] = i;</span><br><span class="line">        Time[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dep[i] = <span class="number">0</span>;</span><br><span class="line">        dfs(i,<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it:query)&#123;</span><br><span class="line">        <span class="keyword">int</span> t = it.first,u = it.second.first,v = it.second.second;</span><br><span class="line">        <span class="keyword">if</span>(u==v) <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> t1 = getf(u),t2 = getf(v);</span><br><span class="line">            <span class="keyword">if</span>(t1!=t2)  <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> res = lca(u,v);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res&gt;t?<span class="number">-1</span>:res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L-Candy-Jars"><a href="#L-Candy-Jars" class="headerlink" title="L - Candy Jars"></a><a href="https://vjudge.net/problem/Gym-100814L">L - Candy Jars</a></h3><p>题意：给出n个罐子，每个罐子里装有一定数量的糖，每次选择一个罐子，扔掉其余所有糖，并将选择罐子里的糖分到所有罐子里使得所有罐子里都不为空。不能分配糖的人输。</p><p>题解：第一种情况当所有罐子里的糖都不够n个罐子分也就是小于n的时候，先手必输。当存在糖数可以使得分完后任意罐子都小于n则先手必赢。即存在$a_i&lt;=n<em>(n-1)$。当$a_i&gt;n</em>(n-1)$时由于此时先手无论怎么分，都必然存在分完后的$a_i&lt;=n<em>(n-1)且a_i&gt;=n$即分完后先手必赢，即该游戏先手必输。归纳可得如果存在$n&lt;=a_i$%$n</em>(n-1)&lt;n*(n-1)$则先手赢，否则后手赢。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> LINF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-3</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        <span class="keyword">int</span> w = x%((n<span class="number">-1</span>)*n);</span><br><span class="line">        <span class="keyword">if</span>(w&gt;=n||w==<span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)    <span class="built_in">puts</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>    <span class="built_in">puts</span>(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;A-Arcade-Game&quot;&gt;&lt;a href=&quot;#A-Arcade-Game&quot; class=&quot;headerlink&quot; title=&quot;A - Arcade Game&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://vjudge.net/problem/Gym-10081</summary>
      
    
    
    
    <category term="ACM" scheme="http://example.com/categories/ACM/"/>
    
    
    <category term="题解" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>A-Radio-Prize</title>
    <link href="http://example.com/2021/01/24/A-Radio-Prize/"/>
    <id>http://example.com/2021/01/24/A-Radio-Prize/</id>
    <published>2021-01-24T14:35:56.000Z</published>
    <updated>2021-01-24T15:40:06.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一棵树，树上每条边及每个点都有权值。定义$P_u=\sum_{v}d(u,v)(t_u+t_v)$其中$d(u,v)$为树上u到v的距离，$t_u$和$t_v$分别是两点权值，求每个点的P值。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先我们可以看到$P_u$可以分成 $t_u\sum_{v}d(u,v)+\sum_vt_vd(u,v)$ ，则我们只需要知道对于每一个节点$\sum_{v}d(u,v)$和$\sum_vt_vd(u,v)$的值即可。直接计算复杂度太高，我们可以考虑通过一个已经计算出值的节点计算当前节点值。</p><p>当我们已经计算得到$u$的值，并想要得到与$u$相邻$u’$的值时，可以将除了$u’$的其他节点分为两部分，一部分不经过$u$，另一部分经过$u$。</p><ul><li><p>计算$\sum_{v}d(u,v)$时，对于这两部分节点来说，不经过$u$的节点的$d(u’,v)$相比$d(u,v)$减少了$w_i$，经过$u$的节点的$d(u’,v)$相比$d(u,v)$增加了$w_i$，故只需知道两部分节点的分别数量即可得到$\sum_{v}d(u,v)$。</p></li><li><p>计算$\sum_vt_vd(u,v)$时，对于这两部分节点来说，不经过$u$的节点的$t_vd(u’,v)$相比$t_vd(u,v)$减少了$w_i\sum_vtv$，经过$u$的节点的$t_vd(u’,v)$相比$t_vd(u,v)$增加了了$w_i\sum_vtv$，所以这部分只需知道两部分节点的点值和即可得到$\sum_vt_vd(u,v)$</p></li></ul><p>有了转移方法后，我们需要获得对于每一个节点两部分分别的值，故可以指定任意节点为根节点，通过一次dfs，得到子节点数量和及子节点点值和后，通过所有节点数量和所有节点点值和得到另一部分节点的对应值，即可进行转移。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum1[N],sum2[N],num[N],sum[N],Sum;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w,next;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> f[N],cnt;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> value[N],dis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    a[++cnt].v =v;</span><br><span class="line">    a[cnt].w = w;</span><br><span class="line">    a[cnt].next = f[u];</span><br><span class="line">    f[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    num[u] = <span class="number">1</span>;</span><br><span class="line">    sum[u] = value[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = f[u];i;i = a[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = a[i].v,w = a[i].w;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">            vis[v] = <span class="number">1</span>;</span><br><span class="line">            dis[v] = dis[u]+w;</span><br><span class="line">            sum1[<span class="number">1</span>] += dis[v];</span><br><span class="line">            sum2[<span class="number">1</span>] += dis[v]*value[v];</span><br><span class="line">            dfs1(v);</span><br><span class="line">            num[u] += num[v];</span><br><span class="line">            sum[u] += sum[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    ans[u] = sum1[u]*value[u] + sum2[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = f[u];i;i = a[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = a[i].v,w = a[i].w;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">            vis[v] = <span class="number">1</span>;</span><br><span class="line">            sum1[v] = sum1[u] + (n-num[v]*<span class="number">2</span>)*w;</span><br><span class="line">            sum2[v] = sum2[u] + (Sum-sum[v]*<span class="number">2</span>)*w;</span><br><span class="line">            dfs2(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;value[i]);</span><br><span class="line">        Sum += value[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">        add(u,v,w);</span><br><span class="line">        add(v,u,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">    vis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dfs1(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">    vis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dfs2(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给定一棵树，树上每条边及每个点都有权值。定义$P_u=\sum_{v}d(u,v)(t_u+t_v)$其中$d(u,v)$为树上u到v的距离</summary>
      
    
    
    
    <category term="ACM" scheme="http://example.com/categories/ACM/"/>
    
    
    <category term="思维" scheme="http://example.com/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>链式结构入门</title>
    <link href="http://example.com/2021/01/22/%E9%93%BE%E5%BC%8F%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2021/01/22/%E9%93%BE%E5%BC%8F%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8/</id>
    <published>2021-01-22T07:38:16.000Z</published>
    <updated>2021-01-22T07:49:58.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链式结构"><a href="#链式结构" class="headerlink" title="链式结构"></a>链式结构</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;链式结构&quot;&gt;&lt;a href=&quot;#链式结构&quot; class=&quot;headerlink&quot; title=&quot;链式结构&quot;&gt;&lt;/a&gt;链式结构&lt;/h1&gt;</summary>
      
    
    
    
    <category term="ACM" scheme="http://example.com/categories/ACM/"/>
    
    
    <category term="链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>NorthAmericanSoutheastRegional2019部分题解</title>
    <link href="http://example.com/2021/01/22/NorthAmericanSoutheastRegional2019%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2021/01/22/NorthAmericanSoutheastRegional2019%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</id>
    <published>2021-01-22T01:57:00.000Z</published>
    <updated>2021-01-22T02:38:29.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-Carryless-Square-Root"><a href="#A-Carryless-Square-Root" class="headerlink" title="A - Carryless Square Root"></a><a href="https://vjudge.net/problem/Gym-102423A">A - Carryless Square Root</a></h1><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h4><p>给定一个数n，让你找出最小的a使得 a*a 在无进位乘法下等于n</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dfs 但是有一些细节问题需要注意</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e2</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> LINF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> a[N],b[N],c[N];</span><br><span class="line"><span class="keyword">int</span> Max = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//判断到当前位数下是否符合条件</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span> c);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;=pos;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;=pos;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pos!=Max<span class="number">-1</span>&amp;&amp;i+j&gt;pos) <span class="keyword">break</span>;</span><br><span class="line">            c[i+j] += (b[i]*b[j])%<span class="number">10</span>;</span><br><span class="line">            c[i+j] %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;=(pos==Max<span class="number">-1</span>?Max*<span class="number">2</span><span class="number">-2</span>:pos);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c[i]!=a[i])  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dfs找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos==Max)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!check(pos<span class="number">-1</span>))    <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;pos;j++) <span class="built_in">cout</span>&lt;&lt;b[j];</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">        b[pos] = i;</span><br><span class="line">        <span class="keyword">if</span>(check(pos))&#123;</span><br><span class="line">            dfs(pos+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">int</span> n = s.size();</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">        a[i] = s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Max = (n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    dfs(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="D-Swap-Free"><a href="#D-Swap-Free" class="headerlink" title="D - Swap Free"></a><a href="https://vjudge.net/problem/Gym-102423D">D - Swap Free</a></h1><h4 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h4><p>给定一个字符串集合，集合内单词都互为排列，即单词无重复、使用字母完全相同。问找出一个最大子集，使得该集合内单词互相之间无法通过交换一对字母得到。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到两两可以放入同一个集合的单词 跑一遍二分图</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">char</span> str[N][<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> match[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">char</span> str[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (s[i] != str[i]) num++;</span><br><span class="line">    <span class="keyword">return</span> num == <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, v; i &lt; g[u].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[v = g[u][i]]) &#123;</span><br><span class="line">            vis[v] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (!match[v] || dfs(match[v])) &#123;</span><br><span class="line">                match[v] = u;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(match, <span class="number">0</span>, <span class="keyword">sizeof</span> match);</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">if</span> (dfs(i)) num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">            <span class="keyword">if</span> (check(str[i], str[j], len)) &#123;</span><br><span class="line">                g[i].push_back(j);</span><br><span class="line">                g[j].push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">int</span> res = n - Get(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="H-Levenshtein-Distance"><a href="#H-Levenshtein-Distance" class="headerlink" title="H - Levenshtein Distance"></a><a href="https://vjudge.net/problem/Gym-102423H">H - Levenshtein Distance</a></h1><h4 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h4><p>给定使用字母和一个单词，让你找出所有使用该字母表并且仅对该单词操作一次的字符串，操作可以是添加、删除或替换一个字母。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//签到题 暴力跑一遍</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; se;</span><br><span class="line"><span class="built_in">string</span> s, str;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s &gt;&gt; str;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.size(); i++) &#123;</span><br><span class="line">        <span class="built_in">string</span> s2 = str;</span><br><span class="line">        <span class="keyword">auto</span> it = s2.begin() + i;</span><br><span class="line">        s2.erase(it);</span><br><span class="line">        se.insert(s2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : s) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> cc = str[i];</span><br><span class="line">            <span class="keyword">if</span> (c == cc) <span class="keyword">continue</span>;</span><br><span class="line">            str[i] = c;</span><br><span class="line">            se.insert(str);</span><br><span class="line">            str[i] = cc;</span><br><span class="line">            se.insert(str.substr(<span class="number">0</span>, i) + c +</span><br><span class="line">                      str.substr(i, (<span class="keyword">int</span>)str.size() - i));</span><br><span class="line">        &#125;</span><br><span class="line">        se.insert(str + c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> ss : se) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ss &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;A-Carryless-Square-Root&quot;&gt;&lt;a href=&quot;#A-Carryless-Square-Root&quot; class=&quot;headerlink&quot; title=&quot;A - Carryless Square Root&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https:</summary>
      
    
    
    
    <category term="ACM" scheme="http://example.com/categories/ACM/"/>
    
    
    <category term="题解" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Gym-102465-部分题解</title>
    <link href="http://example.com/2021/01/18/Gym-102465K-Dishonest-Driver%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2021/01/18/Gym-102465K-Dishonest-Driver%E9%A2%98%E8%A7%A3/</id>
    <published>2021-01-18T09:04:20.000Z</published>
    <updated>2021-01-18T11:31:47.817Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://vjudge.net/problem/Gym-102465I">I - Mason’s Mark</a></p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给出一张仅有黑白两种颜色的照片，让你分析照片中有几个ABC</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>题目很长…要求很多…但是读明白题后没有一点思路的难度。其他要求不再赘述，这里只说最关键的一点，就是黑色像素仅有三种可能，即噪点，相框，和标记。也就是说，只要排除了相框和标记的黑色像素，剩余的黑色像素一定是一个字母上的。剩下的工作就仅剩下判断这个黑色像素所属字母是什么字母了。我用了一种非常简单粗暴的方法…具体看代码吧</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> LINF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> MOVE[<span class="number">8</span>][<span class="number">2</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isNoise</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> kx = x + MOVE[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> ky = y + MOVE[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s[kx][ky]==<span class="string">&#x27;#&#x27;</span>)  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    q.push(&#123;x,y&#125;);</span><br><span class="line">    vis[x][y] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">auto</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> kx = u.first + MOVE[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> ky = u.second + MOVE[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(kx&lt;=n&amp;&amp;ky&lt;=m&amp;&amp;kx&gt;=<span class="number">1</span>&amp;&amp;ky&gt;=<span class="number">1</span>&amp;&amp;!vis[kx][ky]&amp;&amp;s[kx][ky]==<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                vis[kx][ky] = <span class="literal">true</span>;</span><br><span class="line">                q.push(&#123;kx,ky&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rx = x,ry = y;</span><br><span class="line">    <span class="comment">//走到字母框最右端</span></span><br><span class="line">    <span class="keyword">while</span>(s[rx][ry+<span class="number">1</span>]==<span class="string">&#x27;#&#x27;</span>)   ry++;</span><br><span class="line">    <span class="comment">//一起向下走到最下端</span></span><br><span class="line">    <span class="keyword">while</span>(s[rx+<span class="number">1</span>][ry]==<span class="string">&#x27;#&#x27;</span>)   rx++;</span><br><span class="line">    <span class="keyword">while</span>(s[x+<span class="number">1</span>][y]==<span class="string">&#x27;#&#x27;</span>) x++;</span><br><span class="line">    <span class="comment">//如果不能一起走到最低端说明是C</span></span><br><span class="line">    <span class="keyword">if</span>(rx!=x)   <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//右标记走到最左端</span></span><br><span class="line">    <span class="keyword">while</span>(s[rx][ry<span class="number">-1</span>]==<span class="string">&#x27;#&#x27;</span>)   ry--;</span><br><span class="line">    <span class="comment">//如果不能走到一起说明是A，否则是B</span></span><br><span class="line">    <span class="keyword">if</span>(y!=ry)   <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fill(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> ans1 = <span class="number">0</span>,ans2 = <span class="number">0</span>,ans3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i][j]&amp;&amp;s[i][j]==<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(isNoise(i,j))    vis[i][j] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">switch</span> (check(i,j)) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:ans1++;<span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:ans2++;<span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">3</span>:ans3++;<span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    fill(i,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d&quot;</span>,ans1,ans2,ans3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="https://codeforces.com/gym/102465/problem/K">K-Dishonest Driver</a></p><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>给出一个字符串，两个相邻且相同子串可以进行压缩，问压缩后字符串中有多少元素。</p><h2 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h2><p>一个区间的左半部分和右半部分可以进行合并，很自然的想到区间dp。状态为$dp[i][j]$ ，为字符串下标i到下标j间的最小压缩。</p><p>区间的合并有两种方式，一种是直接合并，最小压缩值为两段区间之和；另一种为压缩合并，最小压缩值为压缩区间的最小压缩值。</p><p>故转移可以写成:</p><ul><li>$dp[i][j] = min(dp[i][j],dp[i][k]+dp[k+1][j])$ </li><li>$dp[i][j] = dp[i][k]$ 当且仅当i到k为循环字符串，且k+1到j为i到k的循环节</li></ul><p>第一种可以对每一个区间都进行判断，因为没有特殊要求。</p><p>第二种情况需要用到两个辅助数组，一个用于$O(1)$判断两段相邻同长度子串是否相等，另一个用于记录一段子串是否为循环字符串，并记录循环字符串最后一个循环节的初始下标。第一个辅助数组可以进行预处理，第二个可以在区间dp的时候进行同步更新。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> LINF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">int</span> Next[N];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1005</span>][<span class="number">1005</span>],a[<span class="number">1005</span>][<span class="number">1005</span>],b[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = i;k&lt;=j;k++)&#123;</span><br><span class="line">        dp[i][j] = min(dp[i][j],dp[i][k]+dp[k+<span class="number">1</span>][j]);</span><br><span class="line">        <span class="keyword">int</span> id = b[i][k];</span><br><span class="line">        <span class="keyword">if</span>(id!=<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[id][k]&amp;&amp;k-id+<span class="number">1</span>==j-k)&#123;</span><br><span class="line">                dp[i][j] = min(dp[i][j],dp[i][k]);</span><br><span class="line">                b[i][j] = k+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="built_in">memset</span>(b,<span class="number">-1</span>,<span class="keyword">sizeof</span> b);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)  dp[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt;j-i+<span class="number">1</span>&amp;&amp;j+k&lt;n;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i+k]!=s[j+k+<span class="number">1</span>])&#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            a[i][j] = !flag;</span><br><span class="line">            <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">                b[i][j] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;=n-i;j++)&#123;</span><br><span class="line">            count(j,j+i<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[<span class="number">0</span>][n<span class="number">-1</span>]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/Gym-102465I&quot;&gt;I - Mason’s Mark&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="ACM" scheme="http://example.com/categories/ACM/"/>
    
    
    <category term="题解" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>manacher介绍及图文讲解（用于求解最长回文子串）</title>
    <link href="http://example.com/2021/01/18/manacher%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%9B%BE%E6%96%87%E8%AE%B2%E8%A7%A3%EF%BC%88%E7%94%A8%E4%BA%8E%E6%B1%82%E8%A7%A3%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%EF%BC%89/"/>
    <id>http://example.com/2021/01/18/manacher%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%9B%BE%E6%96%87%E8%AE%B2%E8%A7%A3%EF%BC%88%E7%94%A8%E4%BA%8E%E6%B1%82%E8%A7%A3%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%EF%BC%89/</id>
    <published>2021-01-18T06:49:12.000Z</published>
    <updated>2021-01-18T08:05:17.607Z</updated>
    
    <content type="html"><![CDATA[<p>manacher算法是一种可以在O(N)时间复杂度下求字符串所有回文子串的算法，也是求最大回文子串最高效的算法。<a id="more"></a>这种算法在进行遍历的时候，充分利用了回文串的特性，减少了许多不必要的计算，使得时间复杂度降低到了线性水平。该算法的难度在于理解，一旦理解后，代码是非常简单的。</p><p>manacher算法有如下几个要点：</p><ul><li>如何计算回文串长度（O($N^2$)算法）</li><li>如何将奇回文串与偶回文串统一判断</li><li>如何优化O($N^2$)时间复杂度的中心拓展算法<br>下面我们来一一讲解</li></ul><h3 id="一、如何计算回文串长度"><a href="#一、如何计算回文串长度" class="headerlink" title="一、如何计算回文串长度"></a>一、如何计算回文串长度</h3><p>如果没有时间上的限制，我们可以使用暴力的做法：中心拓展法</p><p>我们知道，如果一个字符串是回文串，那么该字符串必是中心对称的。故我们可以选择一个中心，从它开始，向两边逐一判断字符是否相同，拓展回文串长度。由于回文串可以是奇回文串也可以是偶回文串，我们需要选择一个字符或者选择两个字符中间作为中心进行逐一判断，故一共有 N + N - 1个中心。</p><h3 id="二、奇回文串与偶回文串的统一判断"><a href="#二、奇回文串与偶回文串的统一判断" class="headerlink" title="二、奇回文串与偶回文串的统一判断"></a>二、奇回文串与偶回文串的统一判断</h3><p>回文串既可以有aba的形式，也可以有abba的形式，在实际写代码的时候如果不进行处理，会使得代码变得比较复杂。<br>因此我们可以在每两个字符间及字符串头、尾加上一个不曾在字符串中出现过的字符，如#、$等字符，使得在进行遍历的时候可以不用分情况讨论</p><p>例如：<img src="https://img-blog.csdnimg.cn/2020081413144140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J3YnlibGFrZQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>则我们可以对所有字符做中心拓展，得回文半径Pi，则原字符串的子回文串长度为Pi - 1<br>代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mid</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> P[<span class="number">105</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">        P[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(s[i+P[i]]==s[i-P[i]]) P[i]++;<span class="comment">//P[i]为回文半径，故i±P[i]为需要进行拓展的最外层</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、中心拓展算法的优化：manacher算法"><a href="#三、中心拓展算法的优化：manacher算法" class="headerlink" title="三、中心拓展算法的优化：manacher算法"></a>三、中心拓展算法的优化：manacher算法</h3><p>目前我们已经有了时间复杂度为O($N^2$)的算法，如何优化呢。</p><p>不难发现，回文串的特点为中心对称，也就是说在回文串当中，围绕对称中心，左半边与右半边是完全相同的。故一个在左半边回文串内的子回文串，也必定存在于右半边，如该字符串<img src="https://img-blog.csdnimg.cn/20200814132545241.png#pic_center" alt="在这里插入图片描述"><br>以b为对称中心，左边aba的子回文串在右边也出现了，那么我们可以思考一下，如果以从左到右的顺序进行中心拓展遍历，是不是可以通过已经计算过的回文半径来给当前还未计算的回文半径进行赋值？答案是显然的，但我们还需要考虑几种不同的情况。</p><p>我们知道上述理论成立的基础，是建立在回文串左右对称的前提下的，也就是说，我们如果想把过去计算过的回文半径拿来用，必然需要判断一下子回文串是否包含在大回文串之内，也就是如下三种情况：</p><ul><li><p>当前中心在回文串的对称位置下的子回文串在回文串内<br>这是最简单的情况也是我们最希望看到的情况，因为我们可以直接使用已经计算过的回文半径来进行赋值<br><img src="https://img-blog.csdnimg.cn/20200814133823543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J3YnlibGFrZQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如我们遍历到当前位置时（绿色箭头），可以通过已经计算过的对称位置子回文串对称中心（橙色箭头）得到当前回文半径，也就是1。</p></li><li><p>当前中心在回文串的对称位置下的子回文串超出了回文串的范围<br>如果对称位置下的子回文串并不完全被包含在回文串内，这种情况下不能直接将对称位置的回文半径赋值。但由于回文串的性质，我们可以保证包含在回文串内部的子串一定是回文串，则该种情况下当前位置的回文半径就是当前位置到回文串边缘的距离。<br><img src="https://img-blog.csdnimg.cn/20200814135620118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J3YnlibGFrZQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>当前我们计算到绿色箭头时，对称位置的Pi = 2，但当前位置距离最大回文串的边界只有1，则只能将其赋值为1。</p></li><li><p>当前中心已经不在回文串范围之内了<br>这种情况下，一切都是未知的，只能用中心拓展算法来进行计算，也就是将该中心初始化为1，并进行中心拓展算法。</p></li></ul><h3 id="四、代码实现"><a href="#四、代码实现" class="headerlink" title="四、代码实现"></a>四、代码实现</h3><p>虽然上面啰里啰嗦讲了一大堆，但实际代码非常简单，可以说理解了之后不用记模板随便敲的那种。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s, str;          <span class="comment">//s为原字符串，str为添加字符后的字符串</span></span><br><span class="line"><span class="keyword">int</span> P[N];               <span class="comment">//保存每个字符的回文半径</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    str+=<span class="string">&#x27;^&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); i++) &#123;</span><br><span class="line">        str += <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        str += s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    str+=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    str+=<span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">manacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> R = <span class="number">0</span>, mid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; str.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        P[i] = R &gt; i ? min(P[<span class="number">2</span> * mid - i], R - i) : <span class="number">1</span>;<span class="comment">//进行三种情况的判断</span></span><br><span class="line">        <span class="keyword">while</span> (str[i + P[i]] == str[i - P[i]]) P[i]++;<span class="comment">//中心拓展</span></span><br><span class="line">        <span class="keyword">if</span> (i + P[i] &gt; R) &#123;                           <span class="comment">//如果当前回文串已经覆盖到了原先没有覆盖到的地方，则更新标记</span></span><br><span class="line">            R = i + P[i];</span><br><span class="line">            mid = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后放一道模板题<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3068">最长回文</a></p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;manacher算法是一种可以在O(N)时间复杂度下求字符串所有回文子串的算法，也是求最大回文子串最高效的算法。</summary>
    
    
    
    <category term="ACM" scheme="http://example.com/categories/ACM/"/>
    
    
    <category term="字符串" scheme="http://example.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>可持久化数据结构之静态主席树</title>
    <link href="http://example.com/2021/01/18/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%9D%99%E6%80%81%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    <id>http://example.com/2021/01/18/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%9D%99%E6%80%81%E4%B8%BB%E5%B8%AD%E6%A0%91/</id>
    <published>2021-01-18T06:44:58.000Z</published>
    <updated>2021-01-18T08:12:24.866Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/zyf0163/p/4749042.html">参考博客</a></p><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>如果完全掌握了主席树的前置知识，主席树其实也是一种并不算很难的数据结构（虽然蒟蒻还是花了好久）。主席树主要的前置知识就是权值线段树，一旦理解了权值线段树的相关知识，那么主席树的学习应该也会变得较为简单。</p><h3 id="权值线段树"><a href="#权值线段树" class="headerlink" title="权值线段树"></a>权值线段树</h3><p>权值线段树是线段树的一种，但是它与普通线段树不同的地方在于，普通线段树节点的区间代表的是序列中的区间，而权值线段树节点的区间则代表了序列中值的区间。<br>如这样一个序列：1 4 2 3 3<br>普通线段树中我们通常以序列下标为范围来进行线段树的区间划分，而在权值线段树中这个数组是这样保存的：<img src="https://img-blog.csdnimg.cn/2020102320060390.png#pic_center" alt="在这里插入图片描述"><br>其中每个节点的值是这个序列在这个值域范围内一共有多少个数。</p><h3 id="权值线段树的可加减性"><a href="#权值线段树的可加减性" class="headerlink" title="权值线段树的可加减性"></a>权值线段树的可加减性</h3><p>让我们想象这样两颗权值线段树：一颗以序列[1,x]为序列建树，另一颗以[1,n]为基础序列建树，同时都用相同的范围建树，这样的两棵树每个节点所代表的值域是完全相同的。这也就是说，如果我们用第二棵树的某个节点的权值去减去第一棵树对应节点的权值，所得到的值便应该是[x+1,n]序列中该节点值域范围内数的数量，这也就是权值线段树的可加减性。<br><img src="https://img-blog.csdnimg.cn/20201023213112488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J3YnlibGFrZQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="静态主席树"><a href="#静态主席树" class="headerlink" title="静态主席树"></a>静态主席树</h3><p>通过权值线段树及其性质，我们不难想到如何查找区间[l,r]范围的第k大数：只需要针对序列a的每一个前缀都建立一颗权值线段树即可。<br>然而这样所需要的空间又过于庞大了，需要一定的优化。<br>通过观察两棵相邻权值线段树的结构，可以发现以下规律：<br><img src="https://img-blog.csdnimg.cn/20201024190236622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J3YnlibGFrZQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>那么我们就可以让没有变化的节点指向到之前建好的树上，并且新建与前一棵树上不同路径上的节点即可。<br><img src="https://i.loli.net/2021/01/18/ByCcmUz54deRrLW.png" alt="20201024191756154"><br>那么这样我们就得到了建立静态主席树的方法，下面是静态主席树模板题及代码<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2665">HDU 2665</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (root &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (root &lt;&lt; 1 | 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line"><span class="keyword">int</span> T[N], rs[N], ls[N], sum[N], cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;root, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    root = ++cnt;</span><br><span class="line">    sum[root] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(ls[root], l, mid);</span><br><span class="line">    build(rs[root], mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;root, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pre, <span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">    root = ++cnt;</span><br><span class="line">    ls[root] = ls[pre], rs[root] = rs[pre];</span><br><span class="line">    sum[root] = sum[pre] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (data &lt;= mid)</span><br><span class="line">        update(ls[root], l, mid, ls[pre], data);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        update(rs[root], mid + <span class="number">1</span>, r, rs[pre], data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> e, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> Sum = sum[ls[e]] - sum[ls[s]];</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= Sum)</span><br><span class="line">        <span class="keyword">return</span> query(ls[s], ls[e], l, mid, k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> query(rs[s], rs[e], mid + <span class="number">1</span>, r, k - Sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> t, n, m, q, l, r, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">            b[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">        m = unique(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - b - <span class="number">1</span>;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        build(T[<span class="number">0</span>], <span class="number">1</span>, m);<span class="comment">//建立一棵空树</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            a[i] = lower_bound(b + <span class="number">1</span>, b + m + <span class="number">1</span>, a[i]) - b;<span class="comment">//离散化后进行下标的对应</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) update(T[i], <span class="number">1</span>, m, T[i - <span class="number">1</span>], a[i]);<span class="comment">//每一个数建立一棵树</span></span><br><span class="line">        <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; k;</span><br><span class="line">            <span class="keyword">int</span> ans = query(T[l<span class="number">-1</span>],T[r],<span class="number">1</span>,m,k);<span class="comment">//查询</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;b[ans]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/zyf0163/p/4749042.html&quot;&gt;参考博客&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;</summary>
      
    
    
    
    <category term="ACM" scheme="http://example.com/categories/ACM/"/>
    
    
    <category term="可持久化数据结构" scheme="http://example.com/tags/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>dijkstra最短路及优化</title>
    <link href="http://example.com/2021/01/18/dijkstra%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%8F%8A%E4%BC%98%E5%8C%96/"/>
    <id>http://example.com/2021/01/18/dijkstra%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%8F%8A%E4%BC%98%E5%8C%96/</id>
    <published>2021-01-18T06:35:00.000Z</published>
    <updated>2021-01-18T08:10:20.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>该算法维护了两个点集，S和V。其中S集合为已经确定到源点最短路径的点集，V集合为未确定到源点最短路径的点集。</p><p>循环进行以下操作直到所有点都确定了与源点的最短路径：从V集合中取出一点，使得该点到源点距离为V集合中最短。然后通过该点，更新与该点相连的点距离源点的距离。最后，将该点放入S集合中。</p><h2 id="算法正确性"><a href="#算法正确性" class="headerlink" title="算法正确性"></a>算法正确性</h2><p>该算法最关键的步骤就是从V集合中取点的操作。设i为V集合中一点，j为V集合中任意其他一点，dis[i]&lt;dis[j]，则dis[i]&lt;dis[j]+a[j][i]，故点i距离源点距离为确定值。其中dis[i]为源点到点i的最短路径，a[j][i]为点j到点i的距离。<br>由于我们需要取一个已经确定了与源点最短路径的点，如果取出的点的dis[i]并不是最小的，那么其他点是可以更新该点的，也就是说该点距离源点的最短路径并不是确定的。相反，如果dis[i]小于集合V中的任何其他点到源点的距离，那么集合V中的其他点一定不能更新dis[i]使dis[i]更小，则点v距离源点的距离dis[i]一定是确定的。</p><h2 id="一些不足"><a href="#一些不足" class="headerlink" title="一些不足"></a>一些不足</h2><p>首先，dijkstra算法得以成立的前提是从V集合中取出的点距离源点的最短路是确定的，不会因为后续的更新而变化的，但是如果图存在负权，则dis[i]&lt;dis[j],但dis[i]不一定小于dis[j]+a[j][i]，这时选择的i点距离源点的最短路就不是确定的了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> h[N],cnt = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> w,v,next;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;<span class="comment">//链式前向星建图</span></span><br><span class="line">    a[++cnt].w = w;</span><br><span class="line">    a[cnt].v = v;</span><br><span class="line">    a[cnt].next = h[u];</span><br><span class="line">    h[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> dis[N],vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;=n;j++)&#123;<span class="comment">//从集合V中选择距离源点最短的点</span></span><br><span class="line">            <span class="keyword">if</span>(!vis[j]&amp;&amp;dis[j]&lt;dis[u])  u = j;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = h[u];j;j = a[j].next)&#123;<span class="comment">//通过该点更新</span></span><br><span class="line">            <span class="keyword">int</span> v = a[j].v,w = a[j].w;</span><br><span class="line">            dis[v] = min(dis[v],dis[u]+w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优先队列（二叉堆）优化"><a href="#优先队列（二叉堆）优化" class="headerlink" title="优先队列（二叉堆）优化"></a>优先队列（二叉堆）优化</h2><p>朴素算法中如果想从集合V中选点需要$O(n)$的时间复杂度，但是如果使用优先队列可以将这一步骤优化到$O(logn)$。直接上代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> h[N],cnt = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> w,v,next;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    a[++cnt].w = w;</span><br><span class="line">    a[cnt].v = v;</span><br><span class="line">    a[cnt].next = h[u];</span><br><span class="line">    h[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; q; <span class="comment">//这里定义的是最大堆，可以在定义的时候改成最小堆</span></span><br><span class="line"><span class="keyword">int</span> n,m,u,v,w;</span><br><span class="line"><span class="keyword">int</span> dis[N],vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    q.push(<span class="built_in">make_pair</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.top().second;<span class="comment">//取出V集合中距离源点最短的点</span></span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = h[u];i;i = a[i].next)&#123;<span class="comment">//松弛</span></span><br><span class="line">            <span class="keyword">int</span> v = a[i].v,w = a[i].w;</span><br><span class="line">            <span class="keyword">if</span>(dis[v] &gt; dis[u] + w)&#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                q.push(<span class="built_in">make_pair</span>(-dis[v],v));<span class="comment">//由于定义的大堆，需要加入最短路径的相反数以获得最小堆</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://zhuanlan.zhihu.com/p/33162490">【原创】算法系列——四种最短路算法：Floyd，Dijkstra，Bellman-Ford，SPFA</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;算法描述&quot;&gt;&lt;a href=&quot;#算法描述&quot; class=&quot;headerlink&quot; title=&quot;算法描述&quot;&gt;&lt;/a&gt;算法描述&lt;/h2&gt;&lt;p&gt;该算法维护了两个点集，S和V。其中S集合为已经确定到源点最短路径的点集，V集合为未确定到源点最短路径的点集。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="ACM" scheme="http://example.com/categories/ACM/"/>
    
    
    <category term="图论" scheme="http://example.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
